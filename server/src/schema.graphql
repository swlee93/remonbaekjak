type Query {
  getTasks: [Task]
  getLightHouseData(taskId: ID!, subtype: String, stime: Float, etime: Float): LightHouseData
}

type Mutation {
  createTask(name: String!, description: String, type: TaskType): Task
}

type LightHouseReportData {
  timestamp: Float
  data: String
}

type LightHouseMetricsData {
  timestamp: Float
  data: String
}
type LightHouseData {
  report: [LightHouseReportData]
  performance: [LightHouseMetricsData]
}
type Subscription {
  createSprint: Sprint
  registObserver: Observer
}

type Task {
  id: ID!
  type: TaskType
  name: String!
  description: String!
  createdBy: String
  createdAt: DateTime!
}

type Sprint {
  id: ID!
  name: String
  taskId: Int
  observers: [Observer]
  logs: [Log]
}

type Observer {
  id: ID!
  name: String
  description: String
  sprint: Sprint
  sprintId: Int
  logs: [Log]
}

type Log {
  id: ID!
  type: String
  level: String
  title: String
  message: String
  createdAt: DateTime
  sprint: Sprint
  sprintId: Int
  observer: Observer
  observerId: Int
}

scalar DateTime

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

enum TaskType {
  LIGHTHOUSE
}
