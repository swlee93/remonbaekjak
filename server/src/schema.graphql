type Query {
  getTasks: [Task]
  getLightHouseData(taskId: ID, subtype: String, stime: Float, etime: Float, includeColumns: String): LightHouseData
  getReportInfo(taskType: TaskType, stime: Float, etime: Float): [LightHouseReportData]
  getSettings: Settings
}

type Mutation {
  createTask(name: String!, description: String, type: TaskType): Task
  updateSettings(settingsInput: SettingsInput): Settings
}

type LightHouseReportData {
  timestamp: Float
  data: String
}

extend type LightHouseReportData {
  task: Task
}

type LightHouseData {
  report: [LightHouseReportData]
  performance: [JSON]
}
type Subscription {
  createSprint: Sprint
  registObserver: Observer
}

type Task {
  id: ID!
  type: TaskType
  name: String!
  description: String!
  createdBy: String
  createdAt: DateTime!
}

type Settings {
  userId: String
  github_personal_access_token: String
  github_repositories: [String]
}
input SettingsInput {
  github_personal_access_token: String
  github_repositories: [String]
}
type Sprint {
  id: ID!
  name: String
  taskId: Int
  observers: [Observer]
  logs: [Log]
}

type Observer {
  id: ID!
  name: String
  description: String
  sprint: Sprint
  sprintId: Int
  logs: [Log]
}

type Log {
  id: ID!
  type: String
  level: String
  title: String
  message: String
  createdAt: DateTime
  sprint: Sprint
  sprintId: Int
  observer: Observer
  observerId: Int
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

enum TaskType {
  LIGHTHOUSE
}

scalar DateTime
scalar JSON
scalar JSONObject
