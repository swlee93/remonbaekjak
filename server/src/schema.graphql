type Query {
  getUser(token: String): User
  getTasks: [Task]
  getLightHouseData(taskId: ID, subtype: String, stime: Float, etime: Float, includeColumns: String): LightHouseData
  getReportInfos(
    taskType: TaskType
    taskId: ID
    stime: Float
    etime: Float
    first: Int
    after: Float
  ): ReportInfoResponse
  getReportInfoByTimestamp(taskType: TaskType, timestamp: Float): LightHouseReportData
  getSettings: Settings
}

type Mutation {
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, password: String!, name: String!): AuthPayload

  createTask(name: String!, description: String, type: TaskType, tags: [TagInput]): Task
  deleteTask(id: Int): Task
  updateSettings(settingsInput: SettingsInput): Settings
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  tasks: [Task]
  settings: Settings
}

type ReportInfoEdge {
  cursor: String
  node: LightHouseReportData
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type ReportInfoResponse {
  edges: [ReportInfoEdge]
  pageInfo: PageInfo
}

type LightHouseReportData {
  timestamp: Float
  data: JSON
}

extend type LightHouseReportData {
  task: Task
}

type LightHouseData {
  report: [LightHouseReportData]
  performance: [JSON]
}
type Tag {
  key: String
  value: String
}
type Task {
  id: ID!
  type: TaskType
  name: String!
  description: String!
  tags: [Tag]
  userId: Int
  user: User
  createdAt: DateTime!
}

type Settings {
  id: ID!
  userId: Int
  user: User
  github_personal_access_token: String
  github_repositories: [String]
}

input TagInput {
  key: String
  value: String
}

input SettingsInput {
  userId: Int
  github_personal_access_token: String
  github_repositories: [String]
}

enum TaskType {
  LIGHTHOUSE
}

scalar DateTime
scalar JSON
scalar JSONObject
